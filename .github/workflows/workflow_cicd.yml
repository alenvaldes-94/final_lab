name: workflow para cicd

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        shell: bash
        run: |
          python -m pip install --upgrade pip |& tee -a pipeline.log
          pip install -r requirements.txt |& tee -a pipeline.log

      - name: Compile (byte-compile) sources
        shell: bash
        run: |
          python -m py_compile *.py |& tee -a pipeline.log

      - name: Build Docker image
        shell: bash
        run: |
          docker build -t myapp:latest . |& tee -a pipeline.log

      - name: Run container
        shell: bash
        run: |
          docker run -d --name web -p 8000:8000 myapp:latest |& tee -a pipeline.log
          docker ps |& tee -a pipeline.log

      - name: Run tests against the web UI
        shell: bash
        run: |
          pytest -q |& tee -a pipeline.log

      - name: Stop container (always)
        if: always()
        shell: bash
        run: |
          echo "--- Docker logs ---" |& tee -a pipeline.log
          docker logs web |& tee -a pipeline.log || true
          docker rm -f web || true

      - name: Generate PDF from pipeline.log
        shell: bash
        run: |
          python - <<'PY'
          from reportlab.lib.pagesizes import A4
          from reportlab.pdfgen import canvas
          from reportlab.lib.units import mm
          import textwrap

          log_path = "pipeline.log"
          pdf_path = "pipeline_log.pdf"
          c = canvas.Canvas(pdf_path, pagesize=A4)
          width, height = A4
          left, top = 15*mm, height-15*mm
          c.setFont("Courier", 8)
          y = top
          wrap_width = 100

          with open(log_path, "r", encoding="utf-8", errors="ignore") as f:
              for line in f:
                  line = line.rstrip("\\n")
                  for chunk in textwrap.wrap(line, width=wrap_width, replace_whitespace=False, drop_whitespace=False):
                      if y < 20*mm:
                          c.showPage()
                          c.setFont("Courier", 8)
                          y = top
                      c.drawString(left, y, chunk)
                      y -= 10
          c.save()
          print(f"PDF generado: {pdf_path}")
          PY

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-log-pdf
          path: pipeline_log.pdf